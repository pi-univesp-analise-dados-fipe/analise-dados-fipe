
-- [fipe_dw].[SP_DW_FTO_DADOS_MODELO] @COD_ANO_MES = NULL
-- [fipe_dw].[SP_DW_FTO_DADOS_MODELO] @COD_ANO_MES = 202212
CREATE PROCEDURE[fipe_dw].[SP_DW_FTO_DADOS_MODELO]
	@COD_ANO_MES INT = NULL
--	@FLG_REPROCESSAMENTO BIT 
AS
BEGIN
	DECLARE @DTA_EXECUCAO DATETIME2(2) = GETDATE()
	--IF @COD_ANO_MES IS NULL AND @FLG_REPROCESSAMENTO = 0 
	--	SET @COD_ANO_MES = (SELECT LEFT(FORMAT(DATEADD(MM, 1, CAST(CONCAT(MAX(COD_ANO_MES), '01') AS DATE)), 'yyyyMMdd'), 6) 
	--								FROM fipe_dw.DW_DIM_TEMPO_MENSAL WHERE FLG_ATIVO = 1 )

	;WITH DUPL AS (
		SELECT COUNT(1)QTD, NME_MODELO, COD_MARCA, COD_TIPO_VEICULO
		FROM FIPE_ODS.ODS_MODELO
		GROUP BY NME_MODELO, COD_MARCA, COD_TIPO_VEICULO
		HAVING COUNT(1)>1
	), MENOR_MODELO  AS
	(
		SELECT MD.COD_MODELO, 
			FIRST_VALUE (MD.COD_MODELO)  
			OVER (PARTITION BY 
				MD.NME_MODELO, MD.COD_MARCA, MD.COD_TIPO_VEICULO
				ORDER BY MD.NME_MODELO, MD.COD_MARCA, MD.COD_TIPO_VEICULO
			)COD_MODELO_TRATADO
		FROM FIPE_ODS.ODS_MODELO MD
		INNER JOIN DUPL 
		ON  MD.NME_MODELO = DUPL.NME_MODELO
	) SELECT COD_MODELO, COD_MODELO_TRATADO
		INTO #ODS_MODELO_TRATADO
	FROM MENOR_MODELO 
	WHERE COD_MODELO <> COD_MODELO_TRATADO

	CREATE CLUSTERED INDEX IXC_MODELO_TRATADO  ON #ODS_MODELO_TRATADO (COD_MODELO, COD_MODELO_TRATADO)

	/*
		-- TRATAMENTO HISTÓRICO DE MODELOS DUPLICADOS 
		UPDATE FT SET COD_MODELO = COD_MODELO_TRATADO
		FROM FIPE_DW.DW_FTO_DADOS_MODELO FT
		INNER JOIN #ODS_MODELO_TRATADO  OMT ON FT.COD_MODELO = OMT.COD_MODELO	
		WHERE FT.COD_MODELO <> OMT.COD_MODELO_TRATADO
	*/

	MERGE INTO fipe_dw.DW_FTO_DADOS_MODELO  WITH (TABLOCK) AS DESTINO
		USING (											
					SELECT 
					 TM.COD_ANO_MES AS COD_ANO_MES
					,ISNULL(OMT.COD_MODELO_TRATADO,  FT.COD_MODELO) COD_MODELO
					,CASE	WHEN CHARINDEX('GASOL',		MD.NME_MODELO)	> 0 THEN 1
							WHEN CHARINDEX('ÁLCOOL',	MD.NME_MODELO)	> 0 THEN 2
							WHEN CHARINDEX('DIE',		MD.NME_MODELO)	> 0 THEN 3
							WHEN CHARINDEX('ELETRIC',	MD.NME_MODELO)	> 0 THEN 4
							WHEN CHARINDEX('HÍB',		MD.NME_MODELO)	> 0 THEN 5
							WHEN CHARINDEX('FLEX',		MD.NME_MODELO)	> 0 THEN 6
							ELSE 1
					END as COD_TIPO_COMBUSTIVEL
					,FT.COD_TIPO_VEICULO
					,FT.NUM_ANO_MODELO
					,FT.VLR_MODELO
				FROM		FIPE_ODS.ODS_DADOS_MODELO	FT (NOLOCK)	
				INNER JOIN	FIPE_ODS.ODS_MODELO			MD (NOLOCK)	ON	FT.COD_MODELO			=	MD.COD_MODELO
				inner JOIN	FIPE_DW.DW_DIM_TEMPO_MENSAL TM (NOLOCK) ON	FT.COD_MES_REFERENCIA	=	TM.COD_MES_REFERENCIA_FIPE
				LEFT JOIN	#ODS_MODELO_TRATADO			OMT			ON	OMT.COD_MODELO			=	FT.COD_MODELO

			WHERE	
				/* carrega os dados do mes passado como parametro ou todos os meses se estiver nulo*/
				TM.COD_ANO_MES = @COD_ANO_MES OR @COD_ANO_MES  IS NULL
		) AS ORIGEM
	ON 
		(
			DESTINO.COD_ANO_MES 		= ORIGEM.COD_ANO_MES AND 
			DESTINO.[COD_MODELO] 			= ORIGEM.[COD_MODELO] 			AND 
			DESTINO.[NUM_ANO_MODELO]		= ORIGEM.[NUM_ANO_MODELO]		
		)
	WHEN NOT MATCHED THEN
		INSERT
			(	
				  COD_ANO_MES
				, COD_MODELO
				, COD_TIPO_VEICULO
				, COD_TIPO_COMBUSTIVEL
				, NUM_ANO_MODELO
				, VLR_MODELO
				, DTA_INCLUSAO
			)	
			VALUES
			(	
				  ORIGEM.COD_ANO_MES
				, ORIGEM.COD_MODELO
				, ORIGEM.COD_TIPO_VEICULO
				, ORIGEM.COD_TIPO_COMBUSTIVEL
				, ORIGEM.NUM_ANO_MODELO
				, ORIGEM.VLR_MODELO
				, @DTA_EXECUCAO
			)																					
	WHEN MATCHED AND
	(    
		(ORIGEM.COD_TIPO_VEICULO		<>	DESTINO.COD_TIPO_VEICULO		OR	(ORIGEM.COD_TIPO_VEICULO		IS NULL AND DESTINO.COD_TIPO_VEICULO		IS NOT NULL)	OR	(ORIGEM.COD_TIPO_VEICULO		IS NOT NULL AND DESTINO.COD_TIPO_VEICULO		IS NULL))	OR
		(ORIGEM.COD_TIPO_COMBUSTIVEL	<>	DESTINO.COD_TIPO_COMBUSTIVEL	OR	(ORIGEM.COD_TIPO_COMBUSTIVEL	IS NULL AND DESTINO.COD_TIPO_COMBUSTIVEL	IS NOT NULL)	OR	(ORIGEM.COD_TIPO_COMBUSTIVEL	IS NOT NULL AND DESTINO.COD_TIPO_COMBUSTIVEL	IS NULL))	OR 
		(ORIGEM.VLR_MODELO				<>	DESTINO.VLR_MODELO				OR	(ORIGEM.VLR_MODELO				IS NULL AND DESTINO.VLR_MODELO				IS NOT NULL)	OR	(ORIGEM.VLR_MODELO				IS NOT NULL AND DESTINO.VLR_MODELO				IS NULL))	
	)
	THEN UPDATE
		SET
			DESTINO.COD_TIPO_VEICULO	=	ORIGEM.COD_TIPO_VEICULO		,
			DESTINO.COD_TIPO_COMBUSTIVEL=	ORIGEM.COD_TIPO_COMBUSTIVEL	,
			DESTINO.VLR_MODELO			=	ORIGEM.VLR_MODELO			,	
			DESTINO.DTA_ATUALIZACAO		=	@DTA_EXECUCAO 
	;	
END